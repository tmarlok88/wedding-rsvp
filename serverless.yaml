service: wedding-rsvp
useDotenv: true

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-finch
  - serverless-plugin-additional-stacks
  - serverless-domain-manager
custom:
  environment: ${opt:stage, 'dev'}
  prefix:
    dev: dev
    stage: stg
    production: prd
  domainPrefix:
    dev: 'dev.'
    stage: 'stage.'
    production: ''
  staticPrefix:
    dev: dev_static
    stage: stage_static
    production: 'static'
  tableName: '${self:custom.prefix.${self:custom.environment}}-wedding-rsvp-guests'
  domainName: ${env:WEB_DOMAIN, 'dummy-domain.info'}
  staticBucketName: "${cf:wedding-rsvp-static-resources.StaticBucket, 'wedding-rsvp-staticbucket-${sls:instanceId}'}"
  wsgi:
    app: run.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  client:
    bucketName: ${self:custom.staticBucketName}
    distributionFolder: app/static
    keyPrefix: ${self:custom.staticPrefix.${self:custom.environment}}
    manageResources: false
  customDomain:
    domainName: '${self:custom.domainPrefix.${self:custom.environment}}${env:WEB_DOMAIN}'
    certificateName: '${env:WEB_DOMAIN}'
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: 'regional'
    autoDomain: true
  additionalStacks:
    permanentResources:
      deploy: Before
      StackName: 'wedding-rsvp-static-resources'
      Resources:
        SSLCertificate:
          Type: 'AWS::CertificateManager::Certificate'
          Properties:
            DomainName: '${self:custom.domainName}'
            SubjectAlternativeNames:
              - '*.${self:custom.domainName}'
            ValidationMethod: DNS
            DomainValidationOptions:
              - DomainName: '*.${self:custom.domainName}'
                HostedZoneId: '${env:HOSTED_ZONE_ID}'

        StaticS3Bucket:
          Type: AWS::S3::Bucket
          Properties:
            BucketName: ${self:custom.staticBucketName}
            CorsConfiguration:
              CorsRules:
                - AllowedOrigins:
                    - "https://*.${self:custom.domainName}"
                    - "https://${self:custom.domainName}"
                  AllowedMethods:
                    - GET
                  AllowedHeaders:
                    - "*"
        StaticS3BucketPolicy:
          Type: AWS::S3::BucketPolicy
          Properties:
            Bucket:
              Ref: StaticS3Bucket
            PolicyDocument:
              Statement:
                - Sid: PublicReadGetObject
                  Effect: Allow
                  Principal: "*"
                  Action:
                    - s3:GetObject
                  Resource: arn:aws:s3:::${self:custom.staticBucketName}/*
      Outputs:
        StaticBucketDNS:
          Value: !GetAtt StaticS3Bucket.DualStackDomainName
        StaticBucket:
          Value: !Ref StaticS3Bucket

provider:
  name: aws
  runtime: python3.8
  stage: ${self:custom.environment}
  region: ${opt:region, 'eu-central-1'}
  endpointType: REGIONAL
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource:
        - { "Fn::GetAtt": ["GuestsDynamoDBTable", "Arn" ] }
  environment:
    DYNAMO_TABLE: ${self:custom.tableName}
    FLASK_SECRET: ${env:FLASK_SECRET}
    ADMIN_PASSWORD_HASH: ${env:ADMIN_PASSWORD_HASH}
    RECAPTCHA_PUBLIC_KEY: ${env:RECAPTCHA_PUBLIC_KEY}
    RECAPTCHA_PRIVATE_KEY: ${env:RECAPTCHA_PRIVATE_KEY}
    SENDER_EMAIL_ADDRESS: ${env:SENDER_EMAIL_ADDRESS}
    PERSONALIZE_SRC_FILE: ${env:PERSONALIZE_SRC_FILE}
    STATIC_URL_PATH: "${cf:wedding-rsvp-static-resources.StaticBucketDNS, 'dummy'}"
    ENVIRONMENT: ${env:ENVIRONMENT, self:custom.environment}
    USE_RECAPTCHA_FOR_GUEST: ${env:USE_RECAPTCHA_FOR_GUEST, 'True'}
    USE_RECAPTCHA_FOR_ADMIN: ${env:USE_RECAPTCHA_FOR_ADMIN, 'True'}
    MAPS_API_KEY: ${env:MAPS_API_KEY}
functions:
  app:
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

resources:
  Resources:
    GuestsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.tableName}

package:
  exclude:
    - .idea/**
    - '*.env'
    - '*.md'
    - venv/**
    - __pycache__/**
    - tests/**
    - test-*
    - LICENSE
    - '*.md'
    - babel.cfg
    - run-local.py
    - app/static/**
    - node_modules/**
    - package-lock.json
    - package.json
    - "*.po"